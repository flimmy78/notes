
1.在Ubuntu上为Android系统编写Linux内核驱动程序 
    为了方便描述为Android系统编写内核驱动程序的过程，我们使用一个虚拟的硬件设备，这个设备只有一个4字节的寄存器，它可读可写。这里，我们就把这个虚拟的设备命名为“hello”，而这个内核驱动程序也命名为hello驱动程序。
    1.1 准备好Android内核驱动程序开发环境。

    1.2 进入到kernel/common/drivers目录，新建hello目录;
        在hello目录中增加hello.h文件;
 
    这个头文件定义了一些字符串常量宏，在后面我们要用到。此外，还定义了一个字符设备结构体hello_android_dev，这个就是我们虚拟的硬件设备了，val成员变量就代表设备里面的寄存器，sem成员变量是一个信号量，是用同步访问寄存器val的，dev成员变量是一个内嵌的字符设备。
    在hello目录中增加hello.c文件，这是驱动程序的实现部分。驱动程序的功能主要是向上层提供访问设备的寄存器的值，包括读和写。这里，提供了三种访问设备寄存器的方法，一是通过proc文件系统来访问，二是通过传统的设备文件的方法来访问，三是通过devfs文件系统来访问。
    
    1.3 在hello目录中新增Kconfig和Makefile两个文件。
        Kconfig文件的内容
          config HELLO
              tristate "First Android Driver"
              default n
              help
              This is the first android driver.
        Makefile文件的内容
          obj-$(CONFIG_HELLO) += hello.o
        在Kconfig文件中，tristate表示编译选项HELLO支持在编译内核时，hello模块支持以模块、内建和不编译三种编译方法，默认是不编译，因此，在编译内核前，我们还需要执行make menuconfig命令来配置编译选项，使得hello可以以模块或者内建的方法进行编译。在Makefile文件中，根据选项HELLO的值，执行不同的编译方法。

    1.4 修改arch/arm/Kconfig和drivers/kconfig两个文件，在menu "Device Drivers"和endmenu之间添加一行：
	  source "drivers/hello/Kconfig"
        这样，执行make menuconfig时，就可以配置hello模块的编译选项了。
    
       修改drivers/Makefile文件，添加一行：
          obj-$(CONFIG_HELLO) += hello/

    1.5 配置编译选项： make menuconfig
        要支持动态加载模块选项，必须要在配置菜单中选择Enable loadable module support选项；在支持动态卸载模块选项，必须要在Enable loadable module support菜单项中，选择Module unloading选项。
   
    编译： make
    编译成功后，就可以在hello目录下看到hello.o文件了，这时候编译出来的zImage已经包含了hello驱动。

    运行新编译的内核文件，验证hello驱动程序是否已经正常安装：
	emulator -kernel ./kernel/common/arch/arm/boot/zImage &
	adb shell
	cd dev; ls;
	cd proc; ls;
	car hello; ech0 '5' > hello; cat hello;
	cd /sys/class/hello/hello; ls; cat val; echo '0' > val; cat val;

-------------------------------------------------------------------------------------------------------
2. Android系统内置C可执行程序测试Linux内核驱动程序 
    
    2.2 进入到Android源代码工程的external目录，创建hello目录: cd external; mkdir hello;
        在hello目录中新建hello.c文件
              #include <stdio.h>  
    	      #include <stdlib.h>  
              #include <fcntl.h>  
    	      #define DEVICE_NAME "/dev/hello"  
    	      int main(int argc, char** argv)  
   	      {  
        	  int fd = -1;  
        	  int val = 0;  
                  fd = open(DEVICE_NAME, O_RDWR);  
        	  if(fd == -1) {  
                      printf("Failed to open device %s.\n", DEVICE_NAME);  
                      return -1;  
                  }  
          
        	  printf("Read original value:\n");  
        	  read(fd, &val, sizeof(val));  
        	  printf("%d.\n\n", val);  
        	  val = 5;  
        	  printf("Write value %d to %s.\n\n", val, DEVICE_NAME);  
           	  write(fd, &val, sizeof(val));  
          
        	  printf("Read the value again:\n");  
           	  read(fd, &val, sizeof(val));  
                  printf("%d.\n\n", val);  
        	  close(fd);  
           	  return 0;  
  	      } 


    2.3 在hello目录中新建Android.mk文件
	  LOCAL_PATH := $(call my-dir)

          include $(CLEAR_VARS)

          LOCAL_MODULE_TAGS := optional

          LOCAL_MODULE := hello

          LOCAL_SRC_FILES := $(call all-subdir-c-files)

          include $(BUILD_EXECUTABLE)
	注意，BUILD_EXECUTABLE表示我们要编译的是可执行程序。 

    2.4 使用mmm命令进行编译
	 cd Android; source build/envsetup.sh;
    2.5 重新打包Android系统文件system.img
         make snod;
    2.6 运行模拟器，使用/system/bin/hello可执行程序来访问Linux内核驱动程序
         emulator -kernel/common/arch/arm/boot/zImage &
         adb shell; cd system/bin; ./hello


