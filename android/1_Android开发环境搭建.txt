1. linux下搭建Android SDK环境 (eclipse)
　　1.1. JDK安装
　　1.2. Eclipse安装
　　1.3. ADT和NDK插件安装
　　1.4. Android SDK安装
    1.5. Android NDK安装 

---------------------------------------------------------------------------------
1.1 JDK安装
	1)sudo apt-get install default-jdk 或 sudo apt-get install sun-java6-jdk
	2)下载 jdk-7u25-linux-i586.tar.gz;选择安装目录;在安装目录下解压即可
	设置环境变量，在 /etc/profile中加入如下内容
		JAVA_HOME=安装目录/jdk1.7.0_25
		CLASSPATH=$JAVA_HOME/lib:$JAVA_HOME/jre/lib 
		PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin
		export PATH CLASSPATH JAVA_HOME

1.2 Eclipse安装
	1)sudo apt-get install eclpise
	2)下载源码包;选择安装目录;在安装目录下解压即可

1.3 ADT 插件和 NDK插件安装 (Android Developer Tools)
	1)使用 Eclipse 的升级管理器来安装
	    启动 Eclipse, 然后进入 Help > Install New Software;
	    在 Available Software 对话框里，点击 Add...;
	    出现 Add Site 对话框，在 Name 域里输入名字 (例如, "Android Plugin"),
	    在 Location 域里输入 URL: http://dl-ssl.google.com/android/eclipse/;
	    回到 Available Software 界面，你应该看到"Developer Tools"和"NDK Plugins"。选中。
	    点击 Next, 接受 license agreement， 然后点击 Finish;
	    重起 Eclipse;
	2)手动安装ADT

1.4 Android SDK安装
	下载源码包;选择安装目录;在安装目录下解压;更改目录,如: android-sdk;
    设置环境变量，在~/.bashrc 中加入:
        export PATH=/usr/local/android-sdk/tools:/usr/local/eclipse:$PATH

1.5 Android NDK安装
    下载源码包;选择安装目录;在安装目录下解压;
    设置环境变量，在~/.bashrc 中加入:
        export NDK_HOME=/home/liushui/usr/android-ndk-r9c
        export PATH=$PATH:$NDK_HOME

1.6 CDT安装 (参考ADT安装)

    Location域 http://download.eclipse.org/tools/cdt/releases/indigo

1.7 导入android源码

    android/development/ide/eclipse

Setting up Automatic NDK Builds in Eclipse
http://mobilepearls.com/labs/ndk-builder-in-eclipse/

----------------------------------------------------------------------------
2.Android源代码工程环境

2.1 git安装和JDK安装
  sudo apt-get install git-core gnupg
	
2.2 依赖的其它包
  sudo apt-get install flex bison gperf libsdl-dev libesd0-dev libwxgtk2.6-dev build-essential zip curl
	
2.3 安装repo工具
  mkdir ~/bin
  PATH=~/bin:$PATH
  curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo
  chmod a+x ~/bin/repo

2.4 下载Android最新版本源代码
	mkdir Android
	cd Android
	repo init -u https://android.googlesource.com/platform/manifest
	repo sync; 需等很久
    
2.5 编译Android源代码
	cd Android; make
	问题一：You are attempting to build on a 32-bit system.
	    1)修改build/core目录下的main.mk文件
		选择 ifneq (i686,$(findstring i686,$(build_arch))) 
	    2)找到下列文件：
     		/external/clearsilver/cgi/Android.mk
     		/external/clearsilver/cs/Android.mk
     		/external/clearsilver/java-jni/Android.mk
     		/external/clearsilver/util/Android.mk
     	      修改LOCAL_CFLAGS和LOCAL_LDFLAGS变量： 选择-m32
	 问题二：Undefined reference to `__dso_handle' 
	     修改external/stlport/dll_main.cpp，加入以下声明：
     		extern "C" {
            	    void * __dso_handle = 0;
     		} 
		
2.6 编译SDK（可选）
	cd Android; make SDK
	问题一：找不到bios.bin和vgabios-cirrus.bin文件
	    cp ../Android/prebuilt/common/pc-bios ../Android/out/host/linux-x86/usr/share
	问题二：找不到ddmlib-tests.jar、 ninepath-tests.jar 、common-tests.jar和sdkuilib-tests.jar文件
	     在~/Android/out/host/linux-x86/framework这个目录下，可以找到common.jar、ddmlib.jar、ninepatch.jar、sdkuilib.jar这四个文件，然后将它们分别复制一份，并重命名，命名的原则很简单，就是在原有的名字后面跟上－tests即可.

2.7 安装编译好的Android镜像到模拟器上
	    1)设置环境变量
		export PATH=$PATH:../Android/out/host/linux-x86/bin
		export ANDROID_PRODUCT_OUT=../Android/out/target/product/generic
		其中，../Android/out/host/linux-x86/bin有我们要执行的emulator命令，而../Android/out/target/product/generic是Android镜像存放目录，下面执行emulator命令时会用到。
	    2)运行模拟器
		cd Android; emulator
		模拟器运行需要四个文件，分别是Linux Kernel镜像zImage和Android镜像文件system.img、userdata.img和ramdisk.img。执行emulator命令时，如果不带任何参数，则Linux Kernel镜像默认使用~/Android/prebuilt/android-arm/kernel目录下的kernel-qemu文件，而Android镜像文件则默认使用ANDROID_PRODUCT_OUT目录下的system.img、userdata.img和ramdisk.img，也就是我们刚刚编译出来的镜像文件。
    		当然，我们也可以以指定的镜像文件来运行模拟器，即运行emulator时，即：
		emulator -kernel ./prebuilt/android-arm/kernel/kernel-qemu -sysdir ./out/target/product/generic -system system.img -data userdata.img -ramdisk ramdisk.img
		到这里，我们就可以在模拟器上运行我们自己编译的Android镜像文件了。但是注意，这里说的Android镜像文件，只是包括system.img、userdata.img和ramdisk.img这三个文件，而Linux Kernel镜像用的是Android为我们预编译好的kernel-qemu镜像。

----------------------------------------------------------------------------
3. Android内核源代码环境
    
3.1 下载 Linux Kernel for Android 源代码
	cd Android; mkdir kernel; cd kernel;
	git clone http://android.googlesource.com/kernel/goldfish.git
	在kernel目录下有一个common目录，Linux内核代码就在这里了。
	cd common; git branch; 查看下载的内核代码版本
	上面得到的是主线上的内核源代码，现在我们需要适用于模拟器用的内核，
	因此，我们需要checkout goldfish版本;  git branch -a;‪  选择android-gldfish-xxx; 
	git checkout remotes/origin/archive/android-gldfish-xxx;

	用git clone下载android kernel的源码，下载完成后目录竟然是为空的，只有一个.git目录， 
	原因是这个版本库有多个分支，而下载下来的分支没有代码，可以用git branch -r 来查看远程分支，
	再用git checkout + branch_name就可以下载。

3.2 编译内核代码
	1)导出交叉编译工具目录到$PATH环境变量中去
	  export PATH=$PATH:~/Android/prebuilt/linux-x86/toolchain/arm-eabi-4.4.3/bin
	2)修改common目录下的Makefile文件
	  ARCH ?= arm  		      #体系结构为arm
	  CROSS_COMPILE ?= arm-eabi-  #交叉编译工具链前缀
	3)开始编译
	  cd common; make goldfish_defconfig; make;
	  编译成功后，可看到下面两行：
      	    OBJCOPY arch/arm/boot/zImage
            Kernel: arch/arm/boot/zImage is ready
	  在执行make命令前，你也可以执行make menuconfig先配置一下编译选项

3.3 在模拟器中运行编译好的内核
	1)设置环境变量
	  export PATH=$PATH:~/Android/out/host/linux-x86/bin
	  export ANDROID_PRODUCT_OUT=~/Android/out/target/product/generic
	2)在后台中指定内核文件启动模拟器
	  emulator -kernel ./kernel/common/arch/arm/boot/zImage &
	3)用adb工具连接模拟器，查看内核版本信息，看看模拟器上跑的内核是不是我们刚才编译出来的内核
	  adb shell; 如果是第一次运行会看到一些错误不用管它，再运行一次adb shell命令就可以了
	  root@android:/ # cd proc
      	  root@android:/proc # cat version

----------------------------------------------------------------------------
4. 单独编译Android源代码中的模块
    
4.1 首先在Android源代码目录下的build目录下，执行脚本文件envsetup.sh。
	../build/envsetup.sh; 这是一个source命令，执行这个脚本文件后，就可以获得一些有用的工具。
	这些命令的具体用法，用-help来查看，这里我们只关注mmm命令，用来编译指定目录的所有模块，通常这个目录只包含一个模块。

4.2 使用mmm命令来编译指定的模块，例如Email应用程序
	mmm packages/apps/Email/; 或 cd packages/apps/Email/; mm;
	编译完成之后，就可以在out/target/product/generic/system/app目录下看到Email.apk文件了。Android系统自带的App都放在这具目录下。
  另外，Android系统的一些可执行文件，例如C编译的可执行文件，放在out/target/product/generic/system/bin目录下，动态链接库文件放在
  out/target/product/generic/system/lib目录下，out/target/product/generic/system/lib/hw目录存放的是硬件抽象层(HAL)接口文件。

    4.3 编译好模块后，还要重新打包一下system.img文件
	cd Android; make snod;
	emulator; ...

----------------------------------------------------------------------------
5. 制作可独立分发的Android模拟器 
http://blog.csdn.net/luoshengyang/article/details/6586759

	
	


	


